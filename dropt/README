dropt (deliberately rudimentary options)

Copyright (c) 2006-2009 James D. Lin <jameslin@csua.berkeley.edu>


dropt is a library for parsing command-line options.  Its primary design
goal is to have minimal barriers to entry.  Specifically, this includes:

* High portability.  dropt is written entirely in standard C99 with
  compatibility code for most non-pathological C89 compilers. (wchar_t
  support for the help facility is supported only on Windows platforms,
  however.)

* (Hopefully) straightforward usage.

* No global variables.

* Minimal dependencies.  dropt has no dependencies other than the standard
  C library.  dropt also lets clients opt-in to use only the specific
  features they want.

* An unrestrictive license.  dropt uses the zlib/libpng license and may be
  statically linked with existing code freely.  This avoids some of the
  hassles that sometimes come with dynamically-linked libraries (such as
  ensuring that the compiler options used to build the library match those
  used for the main binary).

* (Approximate) POSIX compatibility.  Existing applications that use
  POSIX-style options hopefully should be able to use dropt without
  breaking their command-line interface. (A notable difference is that
  dropt by default does not allow options to be concatenated with their
  arguments (e.g. -oARGUMENT).  POSIX also discourages this but makes
  exceptions for backwards compatibility reasons.  dropt requires that
  applications opt-in to this behavior.)

* Flexibility.  dropt is designed to be entirely callback-based.  This
  allows it to handle arbitrary arguments to command-line options.  Even
  common types such as integers or strings are handled by callbacks; dropt
  provides standard handlers for them.  Exposing the handlers for standard
  types also allows programs to extend them by building wrappers around
  them.


dropt provides basic option-parsing features:

* GNU-style long options (e.g. "--option").

* Grouping for short options (e.g. "-a -b -c" is equivalent to "-abc").

* Automatically stops parsing when encountering a "--" token.  This allows
  programs to take arguments that start with "-" and not have them be
  treated as options (e.g. "rm -- -rf", "some_numeric_program -- -123").

* Overridable option values.  For example, "--option=1 --option=2" will use
  the value "2".  Boolean flags can be disabled by using "--flag=0" (since
  "--flag" by itself is syntactic sugar for "--flag=1").  This is useful to
  override options specified by shell aliases.  Note that clients that
  specify custom handlers can implement different behaviors if desired.


The implementation is intended to be minimalistic.  What dropt doesn't do:

* Localization.  dropt doesn't provide localization facilities, but it does
  try not to stand in the way of programs that want to localize their help
  text however they choose.

* Tokenizing a single command-line string into an argv array.  This is the
  shell's responsibility. (On Windows, where WinMain() does not receive a
  tokenized argv array, developers should use CommandLineToArgvW or should
  use the __argv global from Microsoft's C runtime library.)

* Command-line argument permutation.  dropt always expects options to come
  before non-options.


Usage:

See dropt_example.c.
